{"version":3,"file":"component---src-templates-post-template-jsx-b5ed692c9d1af3e9e471.js","mappings":"+PAIA,IAAMA,GAAmB,iNAiBnBC,GAAK,gSAiBLC,GAAQ,uOAiBRC,GAAe,8IAcfC,GAAe,4GAMfC,GAAe,QAAO,YAAS,EAANC,OAAH,IAAcC,GAAK,mBAAO,QAAC,KAASA,EAAS,wBAApD,CAAqD,iLAapEC,GAAW,0FAIXC,GAAM,+FAoCZ,EA3BiB,SAAH,GAA2C,IAA5BC,EAAK,EAALA,MAAOC,EAAI,EAAJA,KAAMC,EAAU,EAAVA,WACxC,OACE,QAACT,EAAe,MACd,QAACH,EAAmB,MAClB,QAACC,EAAK,KAAES,IACR,QAACR,EAAQ,MACP,QAACM,EAAW,MACV,QAACC,EAAM,eACNE,IAEH,QAACP,EAAe,KACbQ,EAAWC,KAAI,SAAAC,GAAQ,OACtB,QAACT,EAAY,CACXU,GAAE,cAAgBD,EAClBR,QAAQ,EACRU,IAAKF,GAEJA,EACY,OAO7B,EC1HA,IAAMG,GAAgB,m+BAkItB,EAJoB,SAAH,GAAwB,IAATC,EAAI,EAAJA,KAC9B,OAAO,QAACD,EAAgB,CAACE,wBAAyB,CAAEC,OAAQF,IAC9D,ECjIA,IAIMG,GAAiB,wGAkCvB,EA5BsB,WACpB,IAAMC,GAAUC,EAAAA,EAAAA,aAwBhB,OAtBAC,EAAAA,EAAAA,YAAU,WACR,GAAwB,OAApBF,EAAQG,QAAZ,CAEA,IAAMC,EAAaC,SAASC,cAAc,UAEpCC,EAAa,CACjBC,IAnBM,gCAoBNC,KAnBO,oBAoBP,aAAc,WACdC,MAAO,UACPC,MAAM,eACNC,YAAa,YACbC,MAAO,QAGTC,OAAOC,QAAQR,GAAYS,SAAQ,YAAmB,IAAjBtB,EAAG,KAAEuB,EAAK,KAC7Cb,EAAWc,aAAaxB,EAAKuB,EAC/B,IAEAjB,EAAQG,QAAQgB,YAAYf,EAlBQ,CAmBtC,GAAG,KAEI,QAACL,EAAiB,CAACqB,IAAKpB,GACjC,ECKA,EAnCsB,SAAH,GAKZ,IAHqBqB,EAAK,EAD7BC,KACIC,kBAAoBF,MAEbG,EAAI,EAAfC,SAAWD,KAEX,EAcMH,EAAM,GAbRK,KACE9B,EAAI,EAAJA,KAAK,EAAD,EACJ+B,YACEvC,EAAK,EAALA,MACAwC,EAAO,EAAPA,QACAvC,EAAI,EAAJA,KACAC,EAAU,EAAVA,WAAW,EAAD,EACVuC,UACoBC,EAAe,EAAjCC,gBAAkBD,gBAClBE,EAAS,EAATA,UAKZ,OACE,QAACC,EAAA,EAAQ,CAAC7C,MAAOA,EAAO8C,YAAaN,EAASO,IAAKX,EAAMY,MAAOJ,IAC9D,QAAC,EAAQ,CACP5C,MAAOA,EACPC,KAAMA,EACNC,WAAYA,EACZuC,UAAWC,KAEb,QAAC,EAAW,CAAClC,KAAMA,KACnB,QAAC,EAAa,MAGpB,C","sources":["webpack://gatsby-starter-default/./src/components/Post/PostHead.jsx","webpack://gatsby-starter-default/./src/components/Post/PostContent.jsx","webpack://gatsby-starter-default/./src/components/Post/CommentWidget.jsx","webpack://gatsby-starter-default/./src/templates/post_template.jsx"],"sourcesContent":["import React, { FunctionComponent } from \"react\"\nimport styled from \"@emotion/styled\"\nimport { Link } from \"gatsby\"\n\nconst PostHeadInfoWrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  /* height: 100%; */\n  height: 250px;\n  margin: 60px auto 0;\n  /* padding: 60px 0; */\n  /* padding-top: 60px; */\n  color: #fff;\n\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 40px 20px;\n  }\n`\n\nconst Title = styled.div`\n  display: -webkit-box;\n  overflow: hidden;\n  overflow-wrap: break-word;\n  /* margin-top: auto; */\n  text-overflow: ellipsis;\n  white-space: normal;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n  font-size: 45px;\n  font-weight: 800;\n\n  @media (max-width: 768px) {\n    font-size: 30px;\n  }\n`\n\nconst PostData = styled.div`\n  display: flex;\n  flex-direction: column;\n  /* justify-content: space-between; */\n  /* align-items: center; */\n  /* margin-top: 10px; */\n  font-size: 18px;\n  font-weight: 700;\n\n  @media (max-width: 768px) {\n    flex-direction: column;\n    align-items: flex-start;\n    font-size: 15px;\n    font-weight: 400;\n  }\n`\n\nconst PostHeadWrapper = styled.div`\n  width: 100%;\n  height: 250px;\n  margin-top: 30px;\n\n  @media (max-width: 768px) {\n    height: 300px;\n  }\n`\n\n// const CategoryWrapper = styled.div`\n//   padding-top: 10px;\n// `\n\nconst CategoryWrapper = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  align-items: center;\n`\n\nconst CategoryItem = styled(({ active, ...props }) => <Link {...props} />)`\n  margin-top: 1rem;\n  margin-right: 0.6rem;\n  padding: 0.5rem 1rem;\n  border-radius: 1rem;\n  /* background: #d8d8d8; */\n  background: #000;\n  font-size: 1rem;\n  font-weight: 700;\n  color: #fff;\n  padding-top: 10px;\n`\n\nconst InfoWrapper = styled.div`\n  display: flex;\n  margin-top: 50px;\n`\nconst Author = styled.span`\n  color: #d8d8d8;\n  padding-right: 10px;\n`\n//props로 받아 스타일과 함께 넘겨줌\n//GatsbyImage 컴포넌트는 기본 적용 인라인 스타일이 존재\n//인라인 스타일은 !important 속성이 없으면 스타일 적용 순위에서 밀림\n//!important 속성은 사용하면 안좋기 때문에 인라인으로 스타일 값을 넘겨줌\n\nconst PostHead = function ({ title, date, categories }) {\n  return (\n    <PostHeadWrapper>\n      <PostHeadInfoWrapper>\n        <Title>{title}</Title>\n        <PostData>\n          <InfoWrapper>\n            <Author>@sling</Author>\n            {date}\n          </InfoWrapper>\n          <CategoryWrapper>\n            {categories.map(category => (\n              <CategoryItem\n                to={`/?category=${category}`}\n                active={true}\n                key={category}\n              >\n                {category}\n              </CategoryItem>\n            ))}\n          </CategoryWrapper>\n        </PostData>\n      </PostHeadInfoWrapper>\n    </PostHeadWrapper>\n  )\n}\n\nexport default PostHead\n","import React from 'react'\nimport styled from '@emotion/styled'\n\n\nconst MarkdownRenderer = styled.div`\n   //Renderer Style\n  display: flex;\n  flex-direction: column;\n  width: 768px;\n  margin: 0 auto;\n  padding: 50px 0;\n  word-break: break-all;\n  color: #fff;\n\n  //Markdwon Style\n  line-height: 1.8;\n  font-size: 16px;\n  font-weight: 400;\n\n  //Apply Padding Attribute to All Elements\n   p {\n    padding: 3px 0;\n  }\n\n  //Adjust Heading Element Style\n  h1,\n  h2,\n  h3 {\n    font-weight: 800;\n    margin-bottom: 30px;\n  }\n\n  * + h1,\n  * + h2,\n  * + h3 {\n    margin-top: 30px;\n  }\n\n  hr + h1,\n  hr + h2,\n  hr + h3 {\n    margin-top: 0;\n  }\n\n  h1 {\n    font-size: 30px;\n  }\n\n  h2 {\n    font-size: 25px;\n  }\n\n  h3 {\n    font-size: 20px;\n  } \n\n  //Adjust Quotation Element Style\n  blockquote {\n    margin: 15px 0;\n    padding: 5px 15px;\n    border-left: 2px solid #000;\n    font-weight: 800;\n  }\n  \n  //Adjust List Element Style\n  ol,\n  ul {\n    margin-left: 20px;\n    /* padding: 30px 0; */\n    padding: 10px 0;\n  }\n \n  //Adjust Horizontal Rule style\n  hr {\n    border: 1px solid #000;\n    margin: 30px 0;\n  }\n\n\n  //Adjust Link Element Style\n  a {\n    color: #4263eb;\n    text-decoration: underline;\n  }\n\n  //Adjust Code Style\n  pre[class*='language-'] {\n    margin: 30px 0;\n    padding: 15px;\n    font-size: 15px;\n\n    ::-webkit-scrollbar-thumb {\n      background: rgba(255, 255, 255, 0.5);\n      border-radius: 3px;\n    }\n  }\n  code[class*='language-'],\n  pre[class*='language-'] {\n    tab-size: 2;\n  }\n\n  //Markdown Responsive Design\n  @media (max-width: 768px) {\n    width: 100%;\n    padding: 80px 20px;\n    line-height: 1.6;\n    font-size: 14px;\n\n    h1 {\n      font-size: 23px;\n    }\n\n    h2 {\n      font-size: 20px;\n    }\n\n    h3 {\n      font-size: 17px;\n    }\n\n    img {\n      width: 100%;\n    }\n\n    hr {\n      margin: 50px 0;\n    }\n  }  \n`\n\nconst PostContent = function ({ html }) {\n  return <MarkdownRenderer dangerouslySetInnerHTML={{ __html: html }} />\n}\n\nexport default PostContent\n","import React, { createRef, useEffect } from 'react'\nimport styled from '@emotion/styled'\n\nconst src = 'https://utteranc.es/client.js'\nconst repo = 'sik02/TechBlog-js' // 자신 계정의 레포지토리로 설정\n\n\nconst UtterancesWrapper = styled.div`\n  @media (max-width: 768px) {\n    padding: 0 20px;\n  }\n`\n\nconst CommentWidget = function () {\n  const element = createRef()\n\n  useEffect(() => {\n    if (element.current === null) return\n\n    const utterances = document.createElement('script')\n\n    const attributes = {\n      src,\n      repo,\n      'issue-term': 'pathname',\n      label: 'comment',\n      theme: `github-light`,\n      crossorigin: 'anonymous',\n      async: 'true',\n    }\n\n    Object.entries(attributes).forEach(([key, value]) => {\n      utterances.setAttribute(key, value)\n    })\n\n    element.current.appendChild(utterances)\n  }, [])\n\n  return <UtterancesWrapper ref={element} />\n}\n\nexport default CommentWidget\n","import React from 'react'\nimport { graphql } from 'gatsby'\nimport Template from '../components/Common/Template'\nimport PostHead from '../components/Post/PostHead'\nimport PostContent from '../components/Post/PostContent'\nimport CommentWidget from '../components/Post/CommentWidget'\n\n\n\nconst Post_template = ({\n    data: {\n        allMarkdownRemark: {edges},\n    },\n    location: {href},\n}) => {\n    const {\n        node: {\n          html,\n          frontmatter: {\n            title,\n            summary,\n            date,\n            categories,\n            thumbnail: {\n              childImageSharp: {gatsbyImageData},\n              publicURL,\n            },\n          },\n        },\n      } = edges[0]\n  return (\n    <Template title={title} description={summary} url={href} image={publicURL}>\n      <PostHead\n        title={title}\n        date={date}\n        categories={categories}\n        thumbnail={gatsbyImageData}\n      />\n      <PostContent html={html} />\n      <CommentWidget />\n    </Template>\n  )\n}\n\nexport default Post_template\n\nexport const queryMarkdownDataBySlug = graphql`\n  query queryMarkdownDataBySlug($slug: String) {\n    allMarkdownRemark(filter: { fields: { slug: { eq: $slug } } }) {\n      edges {\n        node {\n          html\n          frontmatter {\n            title\n            summary\n            date(formatString: \"YYYY.MM.DD.\")\n            categories\n            thumbnail {\n              childImageSharp {\n                gatsbyImageData\n              }\n              publicURL\n            }\n          }\n        }\n      }\n    }\n  }\n`"],"names":["PostHeadInfoWrapper","Title","PostData","PostHeadWrapper","CategoryWrapper","CategoryItem","active","props","InfoWrapper","Author","title","date","categories","map","category","to","key","MarkdownRenderer","html","dangerouslySetInnerHTML","__html","UtterancesWrapper","element","createRef","useEffect","current","utterances","document","createElement","attributes","src","repo","label","theme","crossorigin","async","Object","entries","forEach","value","setAttribute","appendChild","ref","edges","data","allMarkdownRemark","href","location","node","frontmatter","summary","thumbnail","gatsbyImageData","childImageSharp","publicURL","Template","description","url","image"],"sourceRoot":""}